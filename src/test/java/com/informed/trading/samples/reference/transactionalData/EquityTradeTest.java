//TEST CANNOT BE RUN UNTIL DATABASE OR MOCK DATABASE IS CREATED
//because test runs with checks on ids which are generated by the database and default to 0 (if no database exists)



package com.informed.trading.reference.transactionaldata;

import com.informed.trading.exception.EmptyArgumentException;
import com.informed.trading.exception.InvalidArgumentException;
import com.informed.trading.reference.tradedata.Currency;
import com.informed.trading.reference.tradedata.Equity;
import com.informed.trading.reference.tradedata.Exchange;
import com.informed.trading.reference.transactionalData.Address;
import com.informed.trading.reference.transactionalData.CounterParty;
import com.informed.trading.reference.transactionalData.EquityTrade;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class EquityTradeTest {

    private Address a1;
    private CounterParty cp1;
    private CounterParty cp2;
    private Equity eq1;
    private Currency c1;
    private Exchange ex1;
    private EquityTrade et1;

    @BeforeEach
    void setUp() {
        a1 = new Address("line1", "line two", "line three", "city", "county", "BL09UG");
        cp1 = new CounterParty("name", "Phoneno", "email", a1);
        cp2 = new CounterParty("n", "pn", "email", a1);
        eq1 = new Equity("name", "LND");
        c1 = new Currency("name", "GBP");
        ex1 = new Exchange("name", "GBP");
        et1 = new EquityTrade(cp1, cp2, eq1, 12, 2.0, c1, ex1);
        System.out.println(et1);


        Address ad1 = new Address("18 low street", "line", "line", "Manchester", "BANES", "BA2 2EE");
        addrService.addAddress(ad1);
        CounterParty cp1 = new CounterParty("jacey", "07947402138", "jacey@email.com", ad1);
        cpService.addCounterParties(cp1);
        CounterParty cp1Db = cpService.getAllCounterParties().get(0);
        CounterParty cp2 = new CounterParty("ag", "0796548383", "ag@email.com", ad1);
        cpService.addCounterParties(cp2);
        CounterParty cp2Db = cpService.getAllCounterParties().get(1);
        Equity equity = new Equity("google", "GOO");
        refService.addEquity(equity);
        Currency currency = new Currency("pounds", "GBP");
        refService.addCurrency(currency);
        Exchange exchange = new Exchange("Ireland", "IRE");
        refService.addExchange(exchange);
        EquityTrade equityTrade = new EquityTrade(cp1Db, cp2Db, refService.getAllEquities().get(0), 10, 20.0, refService.getAllCurrencies().get(0), refService.getAllExchanges().get(0));
        etService.addEquityTrade(equityTrade);
        List<EquityTrade> equityTrades = etService.getAllEquityTrades();
    }

    @Test
    void setCounterParty2() {
        assertThrows(InvalidArgumentException.class, () -> new EquityTrade(null, cp2, eq1, 12, 1.5, c1, ex1));
    }

    @Test
    void setCounterParty1() {
        assertThrows(InvalidArgumentException.class, () -> new EquityTrade(cp1, null, new Date(), eq1, 12, 1.5, c1, ex1));
        assertThrows(EmptyArgumentException.class, () -> new EquityTrade(cp1, cp1, new Date(), eq1, 12, 1.2, c1, ex1));
    }

    @Test
    void getValueOfTrade() {
        System.out.println(et1);
        assertEquals(24, et1.getValueOfTrade(), "the value of this trade should be 24 (derived from 12 x 2)");
    }

    @Test
    void getValueInCurrencyTest(){

    }

}